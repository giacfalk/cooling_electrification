world <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/CLEXREL/Data/gadm36_levels_shp/gadm36_0.shp')
world$id = 1:nrow(world)
world <- dplyr::select(world, GID_0, id)
world$continent = countrycode(world$GID_0, "iso3c", "region")
world_raster <- fasterize::fasterize(world, overlay_current[[1]], "id", fun="first")
# define urban_rural
# urbrur = raster('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Inequal accessibility to services in sub-Saharan Africa/urbanrural_cut_1209.tif')
#
# getmode <- function(v, na.rm=TRUE) {
#   uniqv <- unique(v)
#   uniqv[which.max(tabulate(match(v, uniqv)))]
# }
#
# urbrur <- aggregate(urbrur, fact=60.0024, fun=getmode, na.rm=TRUE)
# urbrur <-projectRaster(urbrur, noacc18)
#
# writeRaster(urbrur, "D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/urbrur.tif", overwrite=T)
urbrur<-raster("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/urbrur.tif")
urbrur = calc(urbrur, function(x){
x[x>13] = 1
x[x<=13] = 0
})
# calculate average number of people in each household based on country and urban/rural
hhsize <- readxl::read_xlsx("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/csvs/population_division_UN_Houseshold_Size_and_Composition_2019.xlsx", sheet="UN HH Size and Composition 2019")
hhsize <- hhsize %>% group_by(`Country or area`) %>% slice(which.max(as.Date(`Reference date (dd/mm/yyyy)`, '%d/%m/%Y'))) %>% ungroup()
hhsize$ISO = countrycode::countrycode(hhsize$`Country or area`, 'country.name', 'iso3c')
hhsize = hhsize %>% dplyr::select(ISO, `Average household size (number of members)`)
isos = unique(world$GID_0)
diff <-setdiff(isos, hhsize$ISO)
more.rows <- data.frame(ISO=diff, `Average household size (number of members)`=NA, stringsAsFactors=F)
colnames(more.rows)[2] <- "Average household size (number of members)"
hhsize<-bind_rows(hhsize, more.rows)
hhsize$`Average household size (number of members)` <- ifelse(hhsize$`Average household size (number of members)` =="..", NA, hhsize$`Average household size (number of members)`)
hhsize$`Average household size (number of members)`=as.numeric(hhsize$`Average household size (number of members)`)
hhsize$`Average household size (number of members)` <- ifelse(is.na(hhsize$`Average household size (number of members)`), mean(hhsize$`Average household size (number of members)`, na.rm=TRUE), hhsize$`Average household size (number of members)`)
world = merge(world, hhsize, by.x="GID_0", by.y="ISO")
world$hhsize = world$`Average household size (number of members)`
hhsize_raster<-fasterize(world, overlay_current[[1]], "hhsize", fun="first")
hhsize_raster <- projectRaster(hhsize_raster, urbrur)
hhsize_raster<-overlay(hhsize_raster, urbrur, fun=function(x,y){
x[y==1]=x*0.75
x[y==0]=x*1.25
})
hhsize_raster <- projectRaster(hhsize_raster, pop18)
HHs_raster = noacc18/hhsize_raster
########
avg_house_area_urban <- 60 #sq m.
avg_house_area_rural <- 100 #sq m.
share_house_cooled_urban = 0.75
share_house_cooled_rural = 0.25
avg_house_volume_urban <- avg_house_area_urban * 2.5 * share_house_cooled_urban #m3
avg_house_volume_rural <- avg_house_area_rural * 3 * share_house_cooled_rural #m3
m2_per_Cton = 55
CC_urban = avg_house_area_urban*share_house_cooled_urban/m2_per_Cton
CC_rural = avg_house_area_rural*share_house_cooled_rural/m2_per_Cton
cooling_ton_to_kw = 3.51685
kw_to_j_per_hour = 3600000
m3toliters = 1000
EER_rural = 2.2
EER_urban = 2.9
crs(CDDs) = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
mean_CDDs <- calc(overlay_current, fun = mean, na.rm = T)
hoursheatday_im <- (overlay_current/mean_CDDs)*6
values(hoursheatday_im) = ifelse(values(hoursheatday_im)>12, 12, values(hoursheatday_im))
values(hoursheatday_im) = ifelse(values(hoursheatday_im)<0, 0, values(hoursheatday_im))
hoursheatday_im <- stack(hoursheatday_im)
hoursheatday_im = projectRaster(hoursheatday_im, overlay_current)
values(hoursheatday_im) = ifelse(values(hoursheatday_im)<0, 0, values(hoursheatday_im))
hoursheatday_im = stack(hoursheatday_im)
DeltaT_im = overlay_current
DeltaT_im = stack(DeltaT_im)
Q_im = list()
urbrur = projectRaster(urbrur, DeltaT_im)
Q_im = overlay(urbrur, DeltaT_im, fun=function(x,y){
y[x==1] = 29*(avg_house_volume_urban * m3toliters /24)*y
y[x==0] = 29*(avg_house_volume_rural* m3toliters /24)*y
})
Q_im = stack(Q_im)
AChours_im = list()
urbrur = projectRaster(urbrur, Q_im)
AChours_im= overlay(urbrur, Q_im, fun=function(x,y){
y[x==1] = y/(CC_urban*cooling_ton_to_kw*kw_to_j_per_hour)
y[x==0] = y/(CC_rural*cooling_ton_to_kw*kw_to_j_per_hour)
})
AChours_im = stack(AChours_im)
AChours2_im = AChours_im
values(AChours2_im) <- ifelse(values(AChours_im)<values(hoursheatday_im), values(hoursheatday_im) - values(AChours_im), 0)
ACconsumption_im_hh = list()
AChours_im = projectRaster(AChours_im, urbrur)
AChours2_im = projectRaster(AChours2_im, urbrur)
# compressor runs 100% of the time when bringing temperature to desired temperature
# compressor runs 40% of the time when keeping temperature steady
ACconsumption_im_hh = overlay(urbrur, AChours_im, AChours2_im, fun=function(x,y, z){
y[x==1] = ((CC_urban*cooling_ton_to_kw) / EER_urban) * (y) + ((CC_urban*cooling_ton_to_kw) / EER_urban) * (z) * 0.4
y[x==0] = ((CC_rural*cooling_ton_to_kw) / EER_urban) * (y) +  ((CC_rural*cooling_ton_to_kw) / EER_urban) * (z) * 0.4
})
ACconsumption_im = stack(ACconsumption_im_hh * HHs_raster)
ACconsumption_i_hh <- calc(ACconsumption_im_hh, fun = sum, na.rm = T)
ACconsumption_i = stack(ACconsumption_i_hh * HHs_raster)
###
Fan_power = 70
min_hrs_permonth_fan_use = 0
max_hrs_permonth_fan_use = 480
mean_CDDs <- calc(overlay_current, fun = sum, na.rm = T)
hoursfanuse_im <- (overlay_current/mean_CDDs)* (max_hrs_permonth_fan_use - min_hrs_permonth_fan_use) + min_hrs_permonth_fan_use
FANconsumption_im_hh = Fan_power*hoursfanuse_im/1000
FANconsumption_im = stack(FANconsumption_im_hh * HHs_raster)
FANconsumption_i_hh <- calc(FANconsumption_im_hh, fun = sum, na.rm = T)
FANconsumption_i = stack(FANconsumption_i_hh * HHs_raster)
##
# extract sum by group of ISO raster
FANconsumption_country =  raster::zonal(FANconsumption_i, world_raster, 'sum', na.rm=T)
ACconsumption_country =  raster::zonal(ACconsumption_i, world_raster, 'sum', na.rm=T)
# merge with shapefile
world = merge(world, FANconsumption_country, by.x="id" , by.y="zone")
world = merge(world, ACconsumption_country, by.x="id" , by.y="zone")
world$FANconsumption = world$value.x
world$ACconsumption = world$value.y
world$TOTconsumption = world$FANconsumption + world$ACconsumption
world = st_as_sf(world)
#TWh
sum(world$TOTconsumption, na.rm = T) / 1000000000
# today about 2000 TWh of AC consumption worldwide: https://www.iea.org/reports/the-future-of-cooling
# # extract country of belonging and wealth distribution in each cell
# dhs_wealth <- read_sf("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/shapefiles/sdr_subnational_data_dhs_2015.shp")
#
# # how to cope with countries with lack of data?
#
# dhs_wealth <- dplyr::select(dhs_wealth, geometry, HCWIXQPLOW, HCWIXQP2ND, HCWIXQPMID, HCWIXQP4TH, HCWIXQPHGH) %>% st_as_sf(.)
#
# colnames(dhs_wealth) <- c("geometry", "n1", "n2", "n3", "n4", "n5")
#
# st_crs(grid_2)<-st_crs(dhs_wealth)
# grid_2 <- st_join(grid_2, dhs_wealth, join = st_intersects)
#
#########
# Simulate penetration of technologies based on CDDs, wealth, and urb/rur
##########
pop_urban<-overlay(noacc18, urbrur, fun=function(x,y){
x[y==0]<-NA
return(x)
})
pop_rural<-overlay(noacc18, urbrur, fun=function(x,y){
x[y==1]<-NA
return(x)
})
# # Scenario 1: AC to urban households and households above 50% in rural
AC_demanding_pop_S1 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster*0.5)
FAN_demanding_pop_S1 <- noacc18/hhsize_raster - AC_demanding_pop_S1
AC_demanding_share_S1 <- AC_demanding_pop_S1 / (AC_demanding_pop_S1 + FAN_demanding_pop_S1)
FAN_demanding_share_S1 <- FAN_demanding_pop_S1 / (AC_demanding_pop_S1 + FAN_demanding_pop_S1)
kwh_S1 = FANconsumption_i * FAN_demanding_share_S1 + ACconsumption_i * AC_demanding_share_S1
world$kwh_S1 = exact_extract(kwh_S1, world, 'sum')
# # Scenario 2: AC to urban households and households above 80% in rural
AC_demanding_pop_S2 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster*0.2)
FAN_demanding_pop_S2 <- noacc18/hhsize_raster - AC_demanding_pop_S2
AC_demanding_share_S2 <- AC_demanding_pop_S2 / (AC_demanding_pop_S2 + FAN_demanding_pop_S2)
FAN_demanding_share_S2 <- FAN_demanding_pop_S2 / (AC_demanding_pop_S2 + FAN_demanding_pop_S2)
kwh_S2 = FANconsumption_i * FAN_demanding_share_S2 + ACconsumption_i * AC_demanding_share_S2
world$kwh_S2 = exact_extract(kwh_S2, world, 'sum')
# # Scenario 3: AC to households above 40% in urban and 80% in rural
AC_demanding_pop_S3 <- merge(pop_urban/hhsize_raster*0.6, pop_rural/hhsize_raster*0.2)
FAN_demanding_pop_S3 <- noacc18/hhsize_raster - AC_demanding_pop_S3
AC_demanding_share_S3 <- AC_demanding_pop_S3 / (AC_demanding_pop_S3 + FAN_demanding_pop_S3)
FAN_demanding_share_S3 <- FAN_demanding_pop_S3 / (AC_demanding_pop_S3 + FAN_demanding_pop_S3)
kwh_S3 = FANconsumption_i * FAN_demanding_share_S3 + ACconsumption_i * AC_demanding_share_S3
world$kwh_S3 = exact_extract(kwh_S3, world, 'sum')
# # Scenario 4 (benchmark): all AC
AC_demanding_pop_S4 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster)
FAN_demanding_pop_S4 <- noacc18/hhsize_raster - AC_demanding_pop_S4
AC_demanding_share_S4 <- AC_demanding_pop_S4 / (AC_demanding_pop_S4 + FAN_demanding_pop_S4)
FAN_demanding_share_S4 <- FAN_demanding_pop_S4 / (AC_demanding_pop_S4 + FAN_demanding_pop_S4)
kwh_S4 = FANconsumption_i * FAN_demanding_share_S4 + ACconsumption_i * AC_demanding_share_S4
world$kwh_S4 = exact_extract(kwh_S4, world, 'sum')
# melt by scenario
world = gather(world, "scenario", "kwh", contains("kwh_S"))
# plot
kwh_country = ggplot() +
theme_classic()+
geom_bar(data = world, aes(x = continent , y = kwh/1000000, group=scenario, fill=scenario), stat = "sum", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("GWh/year for air cooling \nfrom households without electricty")+
xlab("Country")
ggsave("kwh_region.png", kwh_country, device="png")
world$noacc18 = exact_extract(noacc18, world, 'sum')
kwh_map = ggplot() +
theme_classic()+
geom_sf(data = world, aes(fill = kwh/noacc18)) +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
scale_fill_viridis_b(name = "kWh/person without electricity access", trans="log")+
#ggtitle("")+
ylab("Latitude")+
xlab("Longitude")+
facet_wrap(~ scenario, ncol=2)
ggsave("kwh_map.png", kwh_map, device="png")
world$kwhcapita = world$kwh/world$noacc18
View(world$kwhcapita )
#TWh
sum(world$TOTconsumption, na.rm = T) / 1000000000
world$kwh_S1
summary(world$kwh)
View(world$kwhcapita)
View(world$kwh)
sum(world$noacc18)
2180166498/4
kwh_map = ggplot() +
theme_classic()+
geom_sf(data = world, aes(fill = kwh/noacc18)) +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
scale_fill_viridis_b(name = "kWh/person without electricity access/year")+
#ggtitle("")+
ylab("Latitude")+
xlab("Longitude")+
facet_wrap(~ scenario, ncol=2)
ggsave("kwh_map.png", kwh_map, device="png", width = 21, height = 21)
world = subset(world, world$noacc18>100000)
# add country field
world <- read_sf('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/CLEXREL/Data/gadm36_levels_shp/gadm36_0.shp')
world$id = 1:nrow(world)
world <- dplyr::select(world, GID_0, id)
world$continent = countrycode(world$GID_0, "iso3c", "region")
world_raster <- fasterize::fasterize(world, overlay_current[[1]], "id", fun="first")
# define urban_rural
# urbrur = raster('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Inequal accessibility to services in sub-Saharan Africa/urbanrural_cut_1209.tif')
#
# getmode <- function(v, na.rm=TRUE) {
#   uniqv <- unique(v)
#   uniqv[which.max(tabulate(match(v, uniqv)))]
# }
#
# urbrur <- aggregate(urbrur, fact=60.0024, fun=getmode, na.rm=TRUE)
# urbrur <-projectRaster(urbrur, noacc18)
#
# writeRaster(urbrur, "D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/urbrur.tif", overwrite=T)
urbrur<-raster("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/urbrur.tif")
urbrur = calc(urbrur, function(x){
x[x>13] = 1
x[x<=13] = 0
})
# calculate average number of people in each household based on country and urban/rural
hhsize <- readxl::read_xlsx("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/csvs/population_division_UN_Houseshold_Size_and_Composition_2019.xlsx", sheet="UN HH Size and Composition 2019")
hhsize <- hhsize %>% group_by(`Country or area`) %>% slice(which.max(as.Date(`Reference date (dd/mm/yyyy)`, '%d/%m/%Y'))) %>% ungroup()
hhsize$ISO = countrycode::countrycode(hhsize$`Country or area`, 'country.name', 'iso3c')
hhsize = hhsize %>% dplyr::select(ISO, `Average household size (number of members)`)
isos = unique(world$GID_0)
diff <-setdiff(isos, hhsize$ISO)
more.rows <- data.frame(ISO=diff, `Average household size (number of members)`=NA, stringsAsFactors=F)
colnames(more.rows)[2] <- "Average household size (number of members)"
hhsize<-bind_rows(hhsize, more.rows)
hhsize$`Average household size (number of members)` <- ifelse(hhsize$`Average household size (number of members)` =="..", NA, hhsize$`Average household size (number of members)`)
hhsize$`Average household size (number of members)`=as.numeric(hhsize$`Average household size (number of members)`)
hhsize$`Average household size (number of members)` <- ifelse(is.na(hhsize$`Average household size (number of members)`), mean(hhsize$`Average household size (number of members)`, na.rm=TRUE), hhsize$`Average household size (number of members)`)
world = merge(world, hhsize, by.x="GID_0", by.y="ISO")
world$hhsize = world$`Average household size (number of members)`
hhsize_raster<-fasterize(world, overlay_current[[1]], "hhsize", fun="first")
hhsize_raster <- projectRaster(hhsize_raster, urbrur)
hhsize_raster<-overlay(hhsize_raster, urbrur, fun=function(x,y){
x[y==1]=x*0.75
x[y==0]=x*1.25
})
hhsize_raster <- projectRaster(hhsize_raster, pop18)
HHs_raster = noacc18/hhsize_raster
########
avg_house_area_urban <- 60 #sq m.
avg_house_area_rural <- 100 #sq m.
share_house_cooled_urban = 0.75
share_house_cooled_rural = 0.25
avg_house_volume_urban <- avg_house_area_urban * 2.5 * share_house_cooled_urban #m3
avg_house_volume_rural <- avg_house_area_rural * 3 * share_house_cooled_rural #m3
m2_per_Cton = 55
CC_urban = avg_house_area_urban*share_house_cooled_urban/m2_per_Cton
CC_rural = avg_house_area_rural*share_house_cooled_rural/m2_per_Cton
cooling_ton_to_kw = 3.51685
kw_to_j_per_hour = 3600000
m3toliters = 1000
EER_rural = 2.2
EER_urban = 2.9
crs(CDDs) = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
mean_CDDs <- calc(overlay_current, fun = mean, na.rm = T)
hoursheatday_im <- (overlay_current/mean_CDDs)*6
values(hoursheatday_im) = ifelse(values(hoursheatday_im)>12, 12, values(hoursheatday_im))
values(hoursheatday_im) = ifelse(values(hoursheatday_im)<0, 0, values(hoursheatday_im))
hoursheatday_im <- stack(hoursheatday_im)
hoursheatday_im = projectRaster(hoursheatday_im, overlay_current)
values(hoursheatday_im) = ifelse(values(hoursheatday_im)<0, 0, values(hoursheatday_im))
hoursheatday_im = stack(hoursheatday_im)
DeltaT_im = overlay_current
DeltaT_im = stack(DeltaT_im)
Q_im = list()
urbrur = projectRaster(urbrur, DeltaT_im)
Q_im = overlay(urbrur, DeltaT_im, fun=function(x,y){
y[x==1] = 29*(avg_house_volume_urban * m3toliters /24)*y
y[x==0] = 29*(avg_house_volume_rural* m3toliters /24)*y
})
Q_im = stack(Q_im)
AChours_im = list()
urbrur = projectRaster(urbrur, Q_im)
AChours_im= overlay(urbrur, Q_im, fun=function(x,y){
y[x==1] = y/(CC_urban*cooling_ton_to_kw*kw_to_j_per_hour)
y[x==0] = y/(CC_rural*cooling_ton_to_kw*kw_to_j_per_hour)
})
AChours_im = stack(AChours_im)
AChours2_im = AChours_im
values(AChours2_im) <- ifelse(values(AChours_im)<values(hoursheatday_im), values(hoursheatday_im) - values(AChours_im), 0)
ACconsumption_im_hh = list()
AChours_im = projectRaster(AChours_im, urbrur)
AChours2_im = projectRaster(AChours2_im, urbrur)
# compressor runs 100% of the time when bringing temperature to desired temperature
# compressor runs 40% of the time when keeping temperature steady
ACconsumption_im_hh = overlay(urbrur, AChours_im, AChours2_im, fun=function(x,y, z){
y[x==1] = ((CC_urban*cooling_ton_to_kw) / EER_urban) * (y) + ((CC_urban*cooling_ton_to_kw) / EER_urban) * (z) * 0.4
y[x==0] = ((CC_rural*cooling_ton_to_kw) / EER_urban) * (y) +  ((CC_rural*cooling_ton_to_kw) / EER_urban) * (z) * 0.4
})
ACconsumption_im = stack(ACconsumption_im_hh * HHs_raster)
ACconsumption_i_hh <- calc(ACconsumption_im_hh, fun = sum, na.rm = T)
ACconsumption_i = stack(ACconsumption_i_hh * HHs_raster)
###
Fan_power = 70
min_hrs_permonth_fan_use = 0
max_hrs_permonth_fan_use = 480
mean_CDDs <- calc(overlay_current, fun = sum, na.rm = T)
hoursfanuse_im <- (overlay_current/mean_CDDs)* (max_hrs_permonth_fan_use - min_hrs_permonth_fan_use) + min_hrs_permonth_fan_use
FANconsumption_im_hh = Fan_power*hoursfanuse_im/1000
FANconsumption_im = stack(FANconsumption_im_hh * HHs_raster)
FANconsumption_i_hh <- calc(FANconsumption_im_hh, fun = sum, na.rm = T)
FANconsumption_i = stack(FANconsumption_i_hh * HHs_raster)
##
# extract sum by group of ISO raster
FANconsumption_country =  raster::zonal(FANconsumption_i, world_raster, 'sum', na.rm=T)
ACconsumption_country =  raster::zonal(ACconsumption_i, world_raster, 'sum', na.rm=T)
# merge with shapefile
world = merge(world, FANconsumption_country, by.x="id" , by.y="zone")
world = merge(world, ACconsumption_country, by.x="id" , by.y="zone")
world$FANconsumption = world$value.x
world$ACconsumption = world$value.y
world$TOTconsumption = world$FANconsumption + world$ACconsumption
world = st_as_sf(world)
#TWh
sum(world$TOTconsumption, na.rm = T) / 1000000000
# today about 2000 TWh of AC consumption worldwide: https://www.iea.org/reports/the-future-of-cooling
# # extract country of belonging and wealth distribution in each cell
# dhs_wealth <- read_sf("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/shapefiles/sdr_subnational_data_dhs_2015.shp")
#
# # how to cope with countries with lack of data?
#
# dhs_wealth <- dplyr::select(dhs_wealth, geometry, HCWIXQPLOW, HCWIXQP2ND, HCWIXQPMID, HCWIXQP4TH, HCWIXQPHGH) %>% st_as_sf(.)
#
# colnames(dhs_wealth) <- c("geometry", "n1", "n2", "n3", "n4", "n5")
#
# st_crs(grid_2)<-st_crs(dhs_wealth)
# grid_2 <- st_join(grid_2, dhs_wealth, join = st_intersects)
#
#########
# Simulate penetration of technologies based on CDDs, wealth, and urb/rur
##########
pop_urban<-overlay(noacc18, urbrur, fun=function(x,y){
x[y==0]<-NA
return(x)
})
pop_rural<-overlay(noacc18, urbrur, fun=function(x,y){
x[y==1]<-NA
return(x)
})
# # Scenario 1: AC to urban households and households above 50% in rural
AC_demanding_pop_S1 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster*0.5)
FAN_demanding_pop_S1 <- noacc18/hhsize_raster - AC_demanding_pop_S1
AC_demanding_share_S1 <- AC_demanding_pop_S1 / (AC_demanding_pop_S1 + FAN_demanding_pop_S1)
FAN_demanding_share_S1 <- FAN_demanding_pop_S1 / (AC_demanding_pop_S1 + FAN_demanding_pop_S1)
kwh_S1 = FANconsumption_i * FAN_demanding_share_S1 + ACconsumption_i * AC_demanding_share_S1
world$kwh_S1 = exact_extract(kwh_S1, world, 'sum')
# # Scenario 2: AC to urban households and households above 80% in rural
AC_demanding_pop_S2 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster*0.2)
FAN_demanding_pop_S2 <- noacc18/hhsize_raster - AC_demanding_pop_S2
AC_demanding_share_S2 <- AC_demanding_pop_S2 / (AC_demanding_pop_S2 + FAN_demanding_pop_S2)
FAN_demanding_share_S2 <- FAN_demanding_pop_S2 / (AC_demanding_pop_S2 + FAN_demanding_pop_S2)
kwh_S2 = FANconsumption_i * FAN_demanding_share_S2 + ACconsumption_i * AC_demanding_share_S2
world$kwh_S2 = exact_extract(kwh_S2, world, 'sum')
# # Scenario 3: AC to households above 40% in urban and 80% in rural
AC_demanding_pop_S3 <- merge(pop_urban/hhsize_raster*0.6, pop_rural/hhsize_raster*0.2)
FAN_demanding_pop_S3 <- noacc18/hhsize_raster - AC_demanding_pop_S3
AC_demanding_share_S3 <- AC_demanding_pop_S3 / (AC_demanding_pop_S3 + FAN_demanding_pop_S3)
FAN_demanding_share_S3 <- FAN_demanding_pop_S3 / (AC_demanding_pop_S3 + FAN_demanding_pop_S3)
kwh_S3 = FANconsumption_i * FAN_demanding_share_S3 + ACconsumption_i * AC_demanding_share_S3
world$kwh_S3 = exact_extract(kwh_S3, world, 'sum')
# # Scenario 4 (benchmark): all AC
AC_demanding_pop_S4 <- merge(pop_urban/hhsize_raster, pop_rural/hhsize_raster)
FAN_demanding_pop_S4 <- noacc18/hhsize_raster - AC_demanding_pop_S4
AC_demanding_share_S4 <- AC_demanding_pop_S4 / (AC_demanding_pop_S4 + FAN_demanding_pop_S4)
FAN_demanding_share_S4 <- FAN_demanding_pop_S4 / (AC_demanding_pop_S4 + FAN_demanding_pop_S4)
kwh_S4 = FANconsumption_i * FAN_demanding_share_S4 + ACconsumption_i * AC_demanding_share_S4
world$kwh_S4 = exact_extract(kwh_S4, world, 'sum')
# melt by scenario
world = gather(world, "scenario", "kwh", contains("kwh_S"))
# plot
world$noacc18 = exact_extract(noacc18, world, 'sum')
world$kwh = ifelse(world$noacc18<100000, NA, world$kwh)
world$kwhcapita = world$kwh/world$noacc18
kwh_country = ggplot() +
theme_classic()+
geom_bar(data = world, aes(x = continent , y = kwh/1000000, group=scenario, fill=scenario), stat = "sum", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("GWh/year for air cooling \nfrom households without electricty")+
xlab("Country")
ggsave("kwh_region.png", kwh_country, device="png")
kwh_map = ggplot() +
theme_classic()+
geom_sf(data = world, aes(fill = kwh/noacc18)) +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5), legend.position = "bottom", legend.direction = "horizontal")+
scale_fill_viridis_b(name = "kWh/person without electricity access/year")+
#ggtitle("")+
ylab("Latitude")+
xlab("Longitude")+
facet_wrap(~ scenario, ncol=2)
ggsave("kwh_map.png", kwh_map, device="png", width = 21, height = 21)
kwh_country = ggplot() +
theme_classic()+
geom_bar(data = subset(world, world$kwh/1000000>1), aes(x = continent , y = kwh/1000000, group=scenario, fill=scenario), stat = "sum", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("GWh/year for air cooling \nfrom households without electricty")+
xlab("Country")
ggsave("kwh_region.png", kwh_country, device="png")
power <- read.csv('D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Latent demand air cooling/cooling_electricity_SSA/energy/INT-Export-05-24-2020_15-57-02.csv')
power <- split(power,rep(1:400,each=232))
power <- power[1:12]
power_bk = power
for (i in 1:12){
a<-as.character(power[[i]]$ï..Country[1])
colnames(power[[i]])[2] <- a
power[[i]] <- power[[i]][-1,]
power[[i]] <- as.data.frame(power[[i]])
power[[i]][,2] <- as.character(power[[i]][,2])
power[[i]][,2] = ifelse(power[[i]][,2]=="--", 0, power[[i]][,2])
power[[i]][,2] = as.numeric(unlist(power[[i]][,2]))
power[[i]] <- power[[i]][,-1]
}
power2 <- as.data.frame(do.call(cbind, power))
for (i in 1:12) {
colnames(power2)[i] <- as.character(power_bk[[i]]$ï..Country[1])
}
power2 = cbind(as.character(power_bk$`1`$ï..Country[-1]), power2)
# calculate share of each tech over total by country
colnames(power2) <- c("Country", "Total_gen", "Nuclear", "Fossil", "RES", "Hydro", "Non_hydro_res", "Geothermal", "VRES", "Tidal", "Solar", "Wind", "Biomass_waste")
power2 = group_by(power2, Country) %>% mutate(share_fossil = Fossil/Total_gen  , share_res = RES/Total_gen, share_biomass = Biomass_waste/Total_gen, share_nuclear = Nuclear/Total_gen)
# import emission factors (kg co2 per kwh)
#from https://www.mdpi.com/1996-1073/13/10/2527/htm
ef_oil <- 0.545
ef_gas <- 0.368
ef_res <- 0
ef_waste <- 0.555
ef_coal <- 0.870
ef_diesel_200kw <-0.730
ef_diesel_2mw <-0.587
ef_nuclear <- 0
# calculate emission factor / kwh by country
power2 = group_by(power2, Country) %>% mutate(ef = share_res * ef_res + share_fossil * mean(c(ef_coal,  ef_oil, ef_gas)) + share_biomass * ef_waste + share_nuclear * ef_nuclear) %>% ungroup()
power2 <- dplyr::select(power2, Country, ef)
# for each country, multiply power requirement by emission factor
power2$ISO3 = countrycode(power2$Country, "country.name", "iso3c")
countries = merge(world, power2, by.x="GID_0", by.y="ISO3")
countries$co2= countries$ef * countries$kwh
co2_country = ggplot() +
theme_classic()+
geom_col(data = world, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario)) +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
ggsave("co2_region.png", co2_region, device="png")
co2_region = ggplot() +
theme_classic()+
geom_col(data = world, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario)) +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
ggsave("co2_region.png", co2_region, device="png")
co2_region = ggplot() +
theme_classic()+
geom_bar(data = world, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario), stat="sum", position="dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
ggsave("co2_region.png", co2_region, device="png")
co2_region = ggplot() +
theme_classic()+
geom_bar(data = countries, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario), stat="sum", position="dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
co2_region
world$co2 = ifelse(world$noacc18<100000, NA, world$co2)
co2_region = ggplot() +
theme_classic()+
geom_bar(data = countries, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario), stat="sum", position="dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
countries$co2 = ifelse(countries$noacc18<100000, NA, countries$co2)
co2_region = ggplot() +
theme_classic()+
geom_bar(data = countries, aes(x = continent , y = co2/1000000000, fill=scenario, group=scenario), stat="sum", position="dodge") +
theme(axis.text.x = element_text(angle = 90, size=6.75), plot.title = element_text(hjust = 0.5))+
#ggtitle("")+
ylab("Mt CO2/year")+
xlab("Region")
ggsave("co2_region.png", co2_region, device="png")
